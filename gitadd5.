# Historia de Usuario #4: ValidaciÃ³n de Entrada
# (Incluye Historia 1 + Historia 2 + Historia 3 + nueva funcionalidad)

import re
import random

class ChatBot:
    def __init__(self):
        self.user_name = None
        self.conversation_active = True
        
        # Patrones de saludo (Historia 1)
        self.greeting_patterns = [
            r'\b(hola|hi|hello|buenos dÃ­as|buenas tardes|buenas noches|hey)\b',
            r'\b(saludos|quÃ© tal|como estas|cÃ³mo estÃ¡s)\b'
        ]
        
        # Base de conocimiento FAQ (Historia 2)
        self.faq_database = {
            'horarios': {
                'patterns': [r'\b(horario|hora|cuando|abierto|cerrado|atiende)\b'],
                'response': "Nuestros horarios de atenciÃ³n son de lunes a viernes de 9:00 AM a 6:00 PM, y sÃ¡bados de 9:00 AM a 2:00 PM."
            },
            'servicios': {
                'patterns': [r'\b(servicio|que hacen|ofrecen|productos)\b'],
                'response': "Ofrecemos servicios de consultorÃ­a, desarrollo de software, soporte tÃ©cnico y capacitaciÃ³n tecnolÃ³gica."
            },
            'contacto': {
                'patterns': [r'\b(contacto|telÃ©fono|email|direcciÃ³n|ubicaciÃ³n)\b'],
                'response': "Puedes contactarnos al telÃ©fono (555) 123-4567 o por email: info@empresa.com. Estamos ubicados en Av. Principal #123."
            },
            'precios': {
                'patterns': [r'\b(precio|costo|cuanto|tarifa|presupuesto)\b'],
                'response': "Los precios varÃ­an segÃºn el servicio. Te recomiendo contactar a nuestro equipo de ventas para un presupuesto personalizado."
            }
        }
        
        # Patrones de despedida (Historia 3)
        self.farewell_patterns = [
            r'\b(adiÃ³s|adios|bye|hasta luego|nos vemos|gracias|thank you|chao)\b',
            r'\b(me voy|tengo que irme|hasta la vista|hasta pronto)\b'
        ]
    
    def validate_input(self, message):
        """Valida y limpia la entrada del usuario (Historia 4 - NUEVO)"""
        # Verificar entrada vacÃ­a
        if not message or message.strip() == "":
            return "Por favor, escribe algo para que pueda ayudarte."
        
        # Limpiar mensaje
        message = message.strip()
        
        # Detectar mensaje muy corto o confuso
        if len(message) < 2:
            return "No entiendo tu mensaje. Â¿PodrÃ­as ser mÃ¡s especÃ­fico?"
        
        # Detectar caracteres repetidos (spam)
        if len(set(message)) == 1 and len(message) > 3:  # Ej: "aaaaa"
            return "Parece que hay un error en tu mensaje. Â¿PodrÃ­as reformularlo?"
        
        # Detectar solo nÃºmeros sin contexto
        if message.isdigit() and len(message) < 10:
            return "Solo veo nÃºmeros. Â¿PodrÃ­as explicarme quÃ© necesitas?"
        
        # Detectar solo caracteres especiales
        if re.match(r'^[^\w\s]+$', message):
            return "No puedo entender caracteres especiales solos. Â¿PodrÃ­as escribir tu pregunta?"
        
        # Detectar mensaje muy largo (posible spam)
        if len(message) > 500:
            return "Tu mensaje es muy largo. Â¿PodrÃ­as resumir tu pregunta?"
        
        # Detectar palabras sin sentido o teclas aleatorias
        if len(message) > 10 and not re.search(r'[aeiouAEIOU]', message):
            return "No logro entender tu mensaje. Â¿PodrÃ­as escribirlo de otra manera?"
        
        return None  # Entrada vÃ¡lida
    
    def handle_greeting(self, message):
        """Maneja los saludos del usuario (Historia 1)"""
        for pattern in self.greeting_patterns:
            if re.search(pattern, message.lower()):
                name_match = re.search(r'soy (\w+)|me llamo (\w+)|mi nombre es (\w+)', message.lower())
                if name_match:
                    self.user_name = name_match.group(1) or name_match.group(2) or name_match.group(3)
                    self.user_name = self.user_name.capitalize()
                
                if self.user_name:
                    greetings = [
                        f"Â¡Hola {self.user_name}! Â¿En quÃ© puedo ayudarte hoy?",
                        f"Â¡Buenos dÃ­as {self.user_name}! Estoy aquÃ­ para asistirte.",
                        f"Â¡Hola {self.user_name}! Â¿QuÃ© necesitas saber?"
                    ]
                else:
                    greetings = [
                        "Â¡Hola! Soy tu asistente virtual. Â¿En quÃ© puedo ayudarte?",
                        "Â¡Buenos dÃ­as! Â¿CÃ³mo puedo asistirte hoy?",
                        "Â¡Hola! Estoy aquÃ­ para ayudarte. Â¿QuÃ© necesitas?"
                    ]
                
                return random.choice(greetings)
        return None
    
    def handle_faq(self, message):
        """Maneja preguntas frecuentes (Historia 2)"""
        message_lower = message.lower()
        
        for topic, data in self.faq_database.items():
            for pattern in data['patterns']:
                if re.search(pattern, message_lower):
                    return data['response']
        
        return None
    
    def handle_farewell(self, message):
        """Maneja las despedidas del usuario (Historia 3)"""
        for pattern in self.farewell_patterns:
            if re.search(pattern, message.lower()):
                self.conversation_active = False
                
                farewells = [
                    "Â¡Hasta luego! Fue un placer ayudarte.",
                    "Â¡AdiÃ³s! Si necesitas algo mÃ¡s, no dudes en contactarme.",
                    "Â¡Que tengas un excelente dÃ­a! EstarÃ© aquÃ­ cuando me necesites.",
                    "Â¡Gracias por usar nuestro servicio! Â¡Hasta pronto!"
                ]
                
                if self.user_name:
                    farewells = [
                        f"Â¡Hasta luego {self.user_name}! Fue un placer ayudarte.",
                        f"Â¡AdiÃ³s {self.user_name}! Que tengas un excelente dÃ­a.",
                        f"Â¡Nos vemos pronto {self.user_name}! CuÃ­date mucho.",
                        f"Â¡Gracias {self.user_name}! Espero haberte ayudado."
                    ]
                
                return random.choice(farewells)
        return None
    
    def is_active(self):
        """Verifica si la conversaciÃ³n sigue activa (Historia 3)"""
        return self.conversation_active
    
    def get_response(self, message):
        """FunciÃ³n principal que procesa el mensaje"""
        # PRIMERO: Validar entrada (Historia 4 - NUEVO)
        validation_error = self.validate_input(message)
        if validation_error:
            return validation_error
        
        # Verificar despedidas
        farewell_response = self.handle_farewell(message)
        if farewell_response:
            return farewell_response
        
        # Verificar saludos
        greeting_response = self.handle_greeting(message)
        if greeting_response:
            return greeting_response
        
        # Verificar FAQ
        faq_response = self.handle_faq(message)
        if faq_response:
            return faq_response
        
        # Respuesta por defecto mejorada (Historia 4)
        default_responses = [
            "No estoy seguro de entender tu pregunta. Â¿PodrÃ­as reformularla?",
            "Disculpa, no tengo informaciÃ³n sobre eso. Puedes preguntar sobre horarios, servicios o contacto.",
            "No encuentro una respuesta para eso. Â¿PodrÃ­as ser mÃ¡s especÃ­fico?",
            "Lo siento, no comprendo. Â¿PodrÃ­as usar otras palabras?"
        ]
        
        return random.choice(default_responses)

# FunciÃ³n principal para probar
def main():
    bot = ChatBot()
    print("ğŸ¤– ChatBot - Historia 4: Con ValidaciÃ³n de Entrada")
    print("Prueba enviar mensajes vacÃ­os, muy cortos, o con caracteres raros...")
    print("="*70)
    
    while bot.is_active():
        try:
            user_input = input("\nğŸ‘¤ TÃº: ")  # Sin .strip() para probar validaciÃ³n
            
            if user_input.lower().strip() in ['exit', 'salir', 'quit']:
                print("ğŸ¤– Bot: Â¡Hasta luego!")
                break
                
            response = bot.get_response(user_input)
            print(f"ğŸ¤– Bot: {response}")
            
        except KeyboardInterrupt:
            print("\nğŸ¤– Bot: Â¡Hasta luego!")
            break
        except Exception as e:
            print(f"ğŸ¤– Bot: Lo siento, ocurriÃ³ un error. Â¿PodrÃ­as intentar de nuevo?")

if __name__ == "__main__":
    main()
