# Historia de Usuario #3: Despedida CortÃ©s
# (Incluye Historia 1 + Historia 2 + nueva funcionalidad)

import re
import random

class ChatBot:
    def __init__(self):
        self.user_name = None
        self.conversation_active = True  # NUEVO - controla si la conversaciÃ³n sigue activa
        
        # Patrones de saludo (Historia 1)
        self.greeting_patterns = [
            r'\b(hola|hi|hello|buenos dÃ­as|buenas tardes|buenas noches|hey)\b',
            r'\b(saludos|quÃ© tal|como estas|cÃ³mo estÃ¡s)\b'
        ]
        
        # Base de conocimiento FAQ (Historia 2)
        self.faq_database = {
            'horarios': {
                'patterns': [r'\b(horario|hora|cuando|abierto|cerrado|atiende)\b'],
                'response': "Nuestros horarios de atenciÃ³n son de lunes a viernes de 9:00 AM a 6:00 PM, y sÃ¡bados de 9:00 AM a 2:00 PM."
            },
            'servicios': {
                'patterns': [r'\b(servicio|que hacen|ofrecen|productos)\b'],
                'response': "Ofrecemos servicios de consultorÃ­a, desarrollo de software, soporte tÃ©cnico y capacitaciÃ³n tecnolÃ³gica."
            },
            'contacto': {
                'patterns': [r'\b(contacto|telÃ©fono|email|direcciÃ³n|ubicaciÃ³n)\b'],
                'response': "Puedes contactarnos al telÃ©fono (555) 123-4567 o por email: info@empresa.com. Estamos ubicados en Av. Principal #123."
            },
            'precios': {
                'patterns': [r'\b(precio|costo|cuanto|tarifa|presupuesto)\b'],
                'response': "Los precios varÃ­an segÃºn el servicio. Te recomiendo contactar a nuestro equipo de ventas para un presupuesto personalizado."
            }
        }
        
        # Patrones de despedida (Historia 3 - NUEVO)
        self.farewell_patterns = [
            r'\b(adiÃ³s|adios|bye|hasta luego|nos vemos|gracias|thank you|chao)\b',
            r'\b(me voy|tengo que irme|hasta la vista|hasta pronto)\b'
        ]
    
    def handle_greeting(self, message):
        """Maneja los saludos del usuario (Historia 1)"""
        for pattern in self.greeting_patterns:
            if re.search(pattern, message.lower()):
                name_match = re.search(r'soy (\w+)|me llamo (\w+)|mi nombre es (\w+)', message.lower())
                if name_match:
                    self.user_name = name_match.group(1) or name_match.group(2) or name_match.group(3)
                    self.user_name = self.user_name.capitalize()
                
                if self.user_name:
                    greetings = [
                        f"Â¡Hola {self.user_name}! Â¿En quÃ© puedo ayudarte hoy?",
                        f"Â¡Buenos dÃ­as {self.user_name}! Estoy aquÃ­ para asistirte.",
                        f"Â¡Hola {self.user_name}! Â¿QuÃ© necesitas saber?"
                    ]
                else:
                    greetings = [
                        "Â¡Hola! Soy tu asistente virtual. Â¿En quÃ© puedo ayudarte?",
                        "Â¡Buenos dÃ­as! Â¿CÃ³mo puedo asistirte hoy?",
                        "Â¡Hola! Estoy aquÃ­ para ayudarte. Â¿QuÃ© necesitas?"
                    ]
                
                return random.choice(greetings)
        return None
    
    def handle_faq(self, message):
        """Maneja preguntas frecuentes (Historia 2)"""
        message_lower = message.lower()
        
        for topic, data in self.faq_database.items():
            for pattern in data['patterns']:
                if re.search(pattern, message_lower):
                    return data['response']
        
        return None
    
    def handle_farewell(self, message):
        """Maneja las despedidas del usuario (Historia 3 - NUEVO)"""
        for pattern in self.farewell_patterns:
            if re.search(pattern, message.lower()):
                self.conversation_active = False  # Marca la conversaciÃ³n como terminada
                
                farewells = [
                    "Â¡Hasta luego! Fue un placer ayudarte.",
                    "Â¡AdiÃ³s! Si necesitas algo mÃ¡s, no dudes en contactarme.",
                    "Â¡Que tengas un excelente dÃ­a! EstarÃ© aquÃ­ cuando me necesites.",
                    "Â¡Gracias por usar nuestro servicio! Â¡Hasta pronto!"
                ]
                
                # Despedida personalizada si conocemos el nombre
                if self.user_name:
                    farewells = [
                        f"Â¡Hasta luego {self.user_name}! Fue un placer ayudarte.",
                        f"Â¡AdiÃ³s {self.user_name}! Que tengas un excelente dÃ­a.",
                        f"Â¡Nos vemos pronto {self.user_name}! CuÃ­date mucho.",
                        f"Â¡Gracias {self.user_name}! Espero haberte ayudado."
                    ]
                
                return random.choice(farewells)
        return None
    
    def is_active(self):
        """Verifica si la conversaciÃ³n sigue activa (Historia 3 - NUEVO)"""
        return self.conversation_active
    
    def get_response(self, message):
        """FunciÃ³n principal que procesa el mensaje"""
        # Primero verificar despedidas (NUEVO)
        farewell_response = self.handle_farewell(message)
        if farewell_response:
            return farewell_response
        
        # Verificar saludos
        greeting_response = self.handle_greeting(message)
        if greeting_response:
            return greeting_response
        
        # Verificar FAQ
        faq_response = self.handle_faq(message)
        if faq_response:
            return faq_response
        
        # Respuesta por defecto
        return "No tengo informaciÃ³n sobre eso. Puedes preguntarme sobre horarios, servicios, contacto o precios."

# FunciÃ³n principal para probar
def main():
    bot = ChatBot()
    print("ðŸ¤– ChatBot - Historia 3: Saludo + FAQ + Despedidas")
    print("Prueba saludar, hacer preguntas y despedirte...")
    print("="*60)
    
    while bot.is_active():  # NUEVO - usa el mÃ©todo is_active()
        try:
            user_input = input("\nðŸ‘¤ TÃº: ").strip()
            if user_input.lower() in ['exit', 'salir', 'quit']:
                print("ðŸ¤– Bot: Â¡Hasta luego!")
                break
                
            response = bot.get_response(user_input)
            print(f"ðŸ¤– Bot: {response}")
            
        except KeyboardInterrupt:
            print("\nðŸ¤– Bot: Â¡Hasta luego!")
            break

if __name__ == "__main__":
    main()
